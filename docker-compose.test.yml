version: '3.8'

services:
  # Frontend Test Service
  frontend-test:
    build:
      context: .
      dockerfile: ./docker/frontend/Dockerfile
      target: builder
    environment:
      - NODE_ENV=test
      - NEXT_PUBLIC_API_URL=http://backend-test:80/api
      - NEXT_PUBLIC_WS_URL=ws://backend-test:3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend-test
    networks:
      - test-network
    command: ["npm", "run", "test:ci"]

  # Backend Test Service
  backend-test:
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
      target: builder
    ports:
      - "8080:80"
    environment:
      - PHP_ENV=testing
      - DB_HOST=mysql-test
      - DB_PORT=3306
      - DB_DATABASE=laburar_test
      - DB_USERNAME=test_user
      - DB_PASSWORD=test_password
      - REDIS_HOST=redis-test
      - REDIS_PORT=6379
      - JWT_SECRET=test-jwt-secret
    volumes:
      - .:/var/www/html
    depends_on:
      mysql-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - test-network

  # Test Database
  mysql-test:
    image: mysql:8.0
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=test_root
      - MYSQL_DATABASE=laburar_test
      - MYSQL_USER=test_user
      - MYSQL_PASSWORD=test_password
    volumes:
      - ./database/test-schema.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s
    tmpfs:
      - /var/lib/mysql

  # Test Redis
  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
    tmpfs:
      - /data

  # Selenium Grid for E2E Testing
  selenium-hub:
    image: selenium/hub:4.11.0
    ports:
      - "4444:4444"
    environment:
      - GRID_MAX_SESSION=2
      - GRID_BROWSER_TIMEOUT=300
      - GRID_TIMEOUT=300
    networks:
      - test-network

  selenium-chrome:
    image: selenium/node-chrome:4.11.0
    depends_on:
      - selenium-hub
    environment:
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444
      - NODE_MAX_INSTANCES=2
      - NODE_MAX_SESSION=2
    volumes:
      - /dev/shm:/dev/shm
    networks:
      - test-network

  selenium-firefox:
    image: selenium/node-firefox:4.11.0
    depends_on:
      - selenium-hub
    environment:
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444
      - NODE_MAX_INSTANCES=2
      - NODE_MAX_SESSION=2
    volumes:
      - /dev/shm:/dev/shm
    networks:
      - test-network

  # Playwright Test Runner
  playwright:
    build:
      context: .
      dockerfile: ./docker/playwright/Dockerfile
    volumes:
      - ./e2e:/app/e2e
      - ./playwright-report:/app/playwright-report
    environment:
      - BASE_URL=http://frontend-test:3000
      - API_URL=http://backend-test:80
    depends_on:
      - frontend-test
      - backend-test
    networks:
      - test-network
    command: ["npx", "playwright", "test", "--config=/app/e2e/playwright.config.js"]

  # Database Migration Testing
  migration-test:
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
      target: builder
    environment:
      - PHP_ENV=testing
      - DB_HOST=mysql-test
      - DB_DATABASE=laburar_test
      - DB_USERNAME=test_user
      - DB_PASSWORD=test_password
    depends_on:
      mysql-test:
        condition: service_healthy
    networks:
      - test-network
    command: ["php", "database/test-migrations.php"]

  # Performance Testing
  k6:
    image: grafana/k6:latest
    volumes:
      - ./performance-tests:/scripts
    environment:
      - BASE_URL=http://backend-test:80
    depends_on:
      - backend-test
    networks:
      - test-network
    command: ["run", "/scripts/load-test.js"]

  # Security Testing
  zap:
    image: owasp/zap2docker-stable
    volumes:
      - ./security-tests:/zap/wrk
    environment:
      - TARGET_URL=http://backend-test:80
    depends_on:
      - backend-test
    networks:
      - test-network
    command: ["zap-baseline.py", "-t", "http://backend-test:80", "-r", "/zap/wrk/security-report.html"]

networks:
  test-network:
    driver: bridge