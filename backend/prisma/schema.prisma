generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                     @id @default(autoincrement())
  email                String                  @unique(map: "email") @db.VarChar(255)
  passwordHash         String                  @map("password_hash") @db.VarChar(255)
  userType             users_user_type         @default(client) @map("user_type")
  firstName            String                  @map("first_name") @db.VarChar(100)
  lastName             String                  @map("last_name") @db.VarChar(100)
  phone                String?                 @db.VarChar(20)
  country              String?                 @db.VarChar(100)
  city                 String?                 @db.VarChar(100)
  profileImage         String?                 @map("profile_image") @db.Text
  status               users_status            @default(active)
  emailVerifiedAt      DateTime?               @map("email_verified_at") @db.Timestamp(0)
  phoneVerifiedAt      DateTime?               @map("phone_verified_at") @db.Timestamp(0)
  lastActive           DateTime?               @map("last_active") @db.Timestamp(0)
  isOnline             Boolean?                @default(false) @map("is_online")
  createdAt            DateTime                @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt            DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  deletedAt            DateTime?               @map("deleted_at") @db.Timestamp(0)
  activityLogs         ActivityLog[]
  conversationsAsP1    Conversation[]          @relation("ConversationParticipant1")
  conversationsAsP2    Conversation[]          @relation("ConversationParticipant2")
  disputeMessages      DisputeMessage[]
  initiatedDisputes    Dispute[]               @relation("DisputeInitiator")
  respondentDisputes   Dispute[]               @relation("DisputeRespondent")
  adminDisputes        Dispute[]               @relation("DisputeAdmin")
  escrowsAsClient      EscrowAccount[]         @relation("EscrowClient")
  escrowsAsFreelancer  EscrowAccount[]         @relation("EscrowFreelancer")
  favorites            Favorite[]
  fileUploads          FileUpload[]
  freelancerProfile    FreelancerProfile?
  freelancerSkills     FreelancerSkill[]
  sentMessages         Message[]               @relation("SentMessages")
  receivedMessages     Message[]               @relation("ReceivedMessages")
  notificationPrefs    NotificationPreference?
  notifications        Notification[]
  password_resets      PasswordReset[]
  paymentMethods       PaymentMethod[]
  portfolioItems       PortfolioItem[]
  attachmentsUploaded  ProjectAttachment[]     @relation("AttachmentUploader")
  attachmentsApproved  ProjectAttachment[]     @relation("AttachmentApprover")
  clientProjects       Project[]               @relation("ClientProjects")
  freelancerProjects   Project[]               @relation("FreelancerProjects")
  proposals            Proposal[]
  refreshTokens        RefreshToken[]
  reviewResponses      ReviewResponse[]
  reviewsGiven         Review[]                @relation("ReviewsGiven")
  reviewsReceived      Review[]                @relation("ReviewsReceived")
  savedSearches        SavedSearch[]
  services             Service[]
  supportResponses     SupportResponse[]
  supportTickets       SupportTicket[]         @relation("SupportTicketUser")
  assignedTickets      SupportTicket[]         @relation("SupportTicketAssignee")
  sentTransactions     Transaction[]           @relation("SentTransactions")
  receivedTransactions Transaction[]           @relation("ReceivedTransactions")
  userAnalytics        UserAnalytic[]
  userBadges           UserBadge[]
  userReputation       UserReputation?
  userSessions         UserSession[]
  videoCallsInitiated  VideoCall[]             @relation("VideoCallInitiator")
  wallet               Wallet?
  withdrawalRequests   WithdrawalRequest[]
  processedWithdrawals WithdrawalRequest[]     @relation("WithdrawalProcessor")

  @@index([email], map: "idx_users_email")
  @@index([isOnline], map: "idx_users_is_online")
  @@index([lastActive], map: "idx_users_last_active")
  @@index([status], map: "idx_users_status")
  @@index([userType], map: "idx_users_user_type")
  @@map("users")
}

model UserSession {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  sessionToken String   @unique(map: "session_token") @map("session_token") @db.VarChar(255)
  ipAddress    String?  @map("ip_address") @db.VarChar(45)
  userAgent    String?  @map("user_agent") @db.Text
  deviceInfo   String?  @map("device_info") @db.LongText
  expiresAt    DateTime @default(now()) @map("expires_at") @db.Timestamp(0)
  lastActivity DateTime @default(now()) @map("last_activity") @db.Timestamp(0)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_sessions_ibfk_1")

  @@index([userId], map: "user_id")
  @@map("user_sessions")
}

model PasswordReset {
  id        Int       @id @default(autoincrement())
  user_id   Int
  email     String    @db.VarChar(255)
  token     String    @unique(map: "token") @db.VarChar(255)
  expiresAt DateTime  @default(now()) @map("expires_at") @db.Timestamp(0)
  isUsed    Boolean?  @default(false) @map("is_used")
  usedAt    DateTime? @map("used_at") @db.Timestamp(0)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  users     User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "password_resets_ibfk_1")

  @@index([user_id], map: "user_id")
  @@map("password_resets")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tokenHash String   @unique(map: "token_hash") @map("token_hash") @db.VarChar(255)
  expiresAt DateTime @default(now()) @map("expires_at") @db.Timestamp(0)
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  isRevoked Boolean? @default(false) @map("is_revoked")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "refresh_tokens_ibfk_1")

  @@index([userId], map: "user_id")
  @@map("refresh_tokens")
}

model FreelancerProfile {
  id             Int                               @id @default(autoincrement())
  userId         Int                               @unique(map: "user_id") @map("user_id")
  bio            String?                           @db.Text
  title          String?                           @db.VarChar(255)
  hourlyRate     Decimal?                          @map("hourly_rate") @db.Decimal(10, 2)
  availability   freelancer_profiles_availability? @default(available)
  timezone       String?                           @db.VarChar(50)
  portfolioUrl   String?                           @map("portfolio_url") @db.VarChar(500)
  languages      String?                           @db.LongText
  certifications String?                           @db.LongText
  createdAt      DateTime                          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime                          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  user           User                              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "freelancer_profiles_ibfk_1")

  @@map("freelancer_profiles")
}

model Skill {
  id               Int               @id @default(autoincrement())
  name             String            @unique(map: "name") @db.VarChar(100)
  slug             String            @unique(map: "slug") @db.VarChar(100)
  category         String?           @db.VarChar(100)
  subcategory      String?           @db.VarChar(100)
  description      String?           @db.Text
  isTrending       Boolean?          @default(false) @map("is_trending")
  isVerified       Boolean?          @default(false) @map("is_verified")
  usageCount       Int?              @default(0) @map("usage_count")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  freelancerSkills FreelancerSkill[]

  @@index([name, description(length: 100)], map: "idx_skills_name_description")
  @@map("skills")
}

model FreelancerSkill {
  id               Int                                 @id @default(autoincrement())
  userId           Int                                 @map("user_id")
  skillId          Int                                 @map("skill_id")
  proficiencyLevel freelancer_skills_proficiency_level @map("proficiency_level")
  yearsExperience  Int?                                @default(0) @map("years_experience")
  endorsedCount    Int?                                @default(0) @map("endorsed_count")
  hourlyRateSkill  Decimal?                            @map("hourly_rate_skill") @db.Decimal(10, 2)
  isFeatured       Boolean?                            @default(false) @map("is_featured")
  createdAt        DateTime                            @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt        DateTime                            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  user             User                                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "freelancer_skills_ibfk_1")
  skill            Skill                               @relation(fields: [skillId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "freelancer_skills_ibfk_2")

  @@unique([userId, skillId], map: "user_skill_unique")
  @@index([proficiencyLevel], map: "idx_freelancer_skills_proficiency")
  @@index([skillId], map: "idx_freelancer_skills_skill_id")
  @@index([userId], map: "idx_freelancer_skills_user_id")
  @@index([skillId], map: "skill_id")
  @@map("freelancer_skills")
}

model PortfolioItem {
  id               Int       @id @default(autoincrement())
  userId           Int       @map("user_id")
  title            String    @db.VarChar(255)
  description      String?   @db.Text
  categoryId       Int?      @map("category_id")
  projectUrl       String?   @map("project_url") @db.VarChar(500)
  mediaFiles       String?   @map("media_files") @db.LongText
  technologiesUsed String?   @map("technologies_used") @db.LongText
  completionDate   DateTime? @map("completion_date") @db.Date
  clientName       String?   @map("client_name") @db.VarChar(100)
  projectValue     Decimal?  @map("project_value") @db.Decimal(12, 2)
  isFeatured       Boolean?  @default(false) @map("is_featured")
  viewCount        Int?      @default(0) @map("view_count")
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "portfolio_items_ibfk_1")
  category         Category? @relation(fields: [categoryId], references: [id], onUpdate: Restrict, map: "portfolio_items_ibfk_2")

  @@index([categoryId], map: "category_id")
  @@index([userId], map: "user_id")
  @@map("portfolio_items")
}

model Category {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(100)
  slug           String          @unique(map: "slug") @db.VarChar(100)
  description    String?         @db.Text
  icon           String?         @db.VarChar(100)
  color          String?         @db.VarChar(7)
  parentId       Int?            @map("parent_id")
  sortOrder      Int?            @default(0) @map("sort_order")
  level          Int?            @default(0)
  isActive       Boolean?        @default(true) @map("is_active")
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  parent         Category?       @relation("CategoryHierarchy", fields: [parentId], references: [id], onUpdate: Restrict, map: "categories_ibfk_1")
  children       Category[]      @relation("CategoryHierarchy")
  portfolioItems PortfolioItem[]
  projects       Project[]
  services       Service[]

  @@index([isActive], map: "idx_categories_is_active")
  @@index([parentId], map: "idx_categories_parent_id")
  @@index([slug], map: "idx_categories_slug")
  @@index([parentId], map: "parent_id")
  @@map("categories")
}

model Service {
  id            Int              @id @default(autoincrement())
  userId        Int              @map("user_id")
  categoryId    Int?             @map("category_id")
  title         String           @db.VarChar(255)
  description   String?          @db.Text
  basePrice     Decimal          @map("base_price") @db.Decimal(10, 2)
  deliveryTime  Int              @map("delivery_time")
  requirements  String?          @db.Text
  galleryImages String?          @map("gallery_images") @db.LongText
  faq           String?          @db.LongText
  extras        String?          @db.LongText
  totalOrders   Int?             @default(0) @map("total_orders")
  totalReviews  Int?             @default(0) @map("total_reviews")
  isActive      Boolean?         @default(true) @map("is_active")
  isFeatured    Boolean?         @default(false) @map("is_featured")
  createdAt     DateTime         @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  packages      ServicePackage[]
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "services_ibfk_1")
  category      Category?        @relation(fields: [categoryId], references: [id], onUpdate: Restrict, map: "services_ibfk_2")

  @@index([categoryId], map: "category_id")
  @@index([categoryId], map: "idx_services_category_id")
  @@index([isActive], map: "idx_services_is_active")
  @@index([isFeatured], map: "idx_services_is_featured")
  @@index([userId], map: "idx_services_user_id")
  @@index([userId], map: "user_id")
  @@map("services")
}

model ServicePackage {
  id             Int                           @id @default(autoincrement())
  serviceId      Int                           @map("service_id")
  packageType    service_packages_package_type @map("package_type")
  name           String                        @db.VarChar(100)
  description    String?                       @db.Text
  price          Decimal                       @db.Decimal(10, 2)
  deliveryTime   Int                           @map("delivery_time")
  features       String?                       @db.LongText
  maxRevisions   Int?                          @default(0) @map("max_revisions")
  extrasIncluded String?                       @map("extras_included") @db.LongText
  createdAt      DateTime                      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime                      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  proposals      Proposal[]
  service        Service                       @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "service_packages_ibfk_1")

  @@index([serviceId], map: "service_id")
  @@map("service_packages")
}

model Project {
  id              Int                        @id @default(autoincrement())
  clientId        Int                        @map("client_id")
  freelancerId    Int?                       @map("freelancer_id")
  categoryId      Int?                       @map("category_id")
  title           String                     @db.VarChar(255)
  description     String                     @db.Text
  budgetMin       Decimal?                   @map("budget_min") @db.Decimal(12, 2)
  budgetMax       Decimal?                   @map("budget_max") @db.Decimal(12, 2)
  budgetType      projects_budget_type       @map("budget_type")
  deadline        DateTime?                  @db.Date
  status          projects_status?           @default(draft)
  requiredSkills  String?                    @map("required_skills") @db.LongText
  experienceLevel projects_experience_level? @map("experience_level")
  proposalCount   Int?                       @default(0) @map("proposal_count")
  isFeatured      Boolean?                   @default(false) @map("is_featured")
  isUrgent        Boolean?                   @default(false) @map("is_urgent")
  publishedAt     DateTime?                  @map("published_at") @db.Timestamp(0)
  startedAt       DateTime?                  @map("started_at") @db.Timestamp(0)
  completedAt     DateTime?                  @map("completed_at") @db.Timestamp(0)
  createdAt       DateTime                   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  conversations   Conversation[]
  disputes        Dispute[]
  escrowAccounts  EscrowAccount[]
  attachments     ProjectAttachment[]
  milestones      ProjectMilestone[]
  client          User                       @relation("ClientProjects", fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "projects_ibfk_1")
  freelancer      User?                      @relation("FreelancerProjects", fields: [freelancerId], references: [id], onUpdate: Restrict, map: "projects_ibfk_2")
  category        Category?                  @relation(fields: [categoryId], references: [id], onUpdate: Restrict, map: "projects_ibfk_3")
  proposals       Proposal[]
  reviews         Review[]
  transactions    Transaction[]

  @@index([categoryId], map: "category_id")
  @@index([clientId], map: "client_id")
  @@index([freelancerId], map: "freelancer_id")
  @@index([budgetType], map: "idx_projects_budget_type")
  @@index([categoryId], map: "idx_projects_category_id")
  @@index([clientId], map: "idx_projects_client_id")
  @@index([freelancerId], map: "idx_projects_freelancer_id")
  @@index([isFeatured], map: "idx_projects_is_featured")
  @@index([publishedAt], map: "idx_projects_published_at")
  @@index([status], map: "idx_projects_status")
  @@map("projects")
}

model Proposal {
  id               Int               @id @default(autoincrement())
  projectId        Int               @map("project_id")
  freelancerId     Int               @map("freelancer_id")
  servicePackageId Int?              @map("service_package_id")
  coverLetter      String?           @map("cover_letter") @db.Text
  proposedAmount   Decimal           @map("proposed_amount") @db.Decimal(12, 2)
  proposedTimeline Int               @map("proposed_timeline")
  milestones       String?           @db.LongText
  attachments      String?           @db.LongText
  status           proposals_status? @default(pending)
  clientViewedAt   DateTime?         @map("client_viewed_at") @db.Timestamp(0)
  respondedAt      DateTime?         @map("responded_at") @db.Timestamp(0)
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  project          Project           @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "proposals_ibfk_1")
  freelancer       User              @relation(fields: [freelancerId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "proposals_ibfk_2")
  servicePackage   ServicePackage?   @relation(fields: [servicePackageId], references: [id], onUpdate: Restrict, map: "proposals_ibfk_3")

  @@unique([projectId, freelancerId], map: "project_freelancer_unique")
  @@index([freelancerId], map: "freelancer_id")
  @@index([createdAt], map: "idx_proposals_created_at")
  @@index([freelancerId], map: "idx_proposals_freelancer_id")
  @@index([projectId], map: "idx_proposals_project_id")
  @@index([status], map: "idx_proposals_status")
  @@index([servicePackageId], map: "service_package_id")
  @@map("proposals")
}

model ProjectMilestone {
  id             Int                        @id @default(autoincrement())
  projectId      Int                        @map("project_id")
  title          String                     @db.VarChar(255)
  description    String?                    @db.Text
  amount         Decimal                    @db.Decimal(12, 2)
  dueDate        DateTime?                  @map("due_date") @db.Date
  status         project_milestones_status? @default(pending)
  deliverables   String?                    @db.LongText
  completedAt    DateTime?                  @map("completed_at") @db.Timestamp(0)
  approvedAt     DateTime?                  @map("approved_at") @db.Timestamp(0)
  createdAt      DateTime                   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  escrowAccounts EscrowAccount[]
  project        Project                    @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "project_milestones_ibfk_1")
  transactions   Transaction[]

  @@index([projectId], map: "project_id")
  @@map("project_milestones")
}

model Conversation {
  id                                               Int         @id @default(autoincrement())
  projectId                                        Int?        @map("project_id")
  participant1Id                                   Int         @map("participant_1_id")
  participant2Id                                   Int         @map("participant_2_id")
  lastMessageId                                    Int?        @map("last_message_id")
  lastMessageAt                                    DateTime?   @map("last_message_at") @db.Timestamp(0)
  unreadCountP1                                    Int?        @default(0) @map("unread_count_p1")
  unreadCountP2                                    Int?        @default(0) @map("unread_count_p2")
  isArchivedP1                                     Boolean?    @default(false) @map("is_archived_p1")
  isArchivedP2                                     Boolean?    @default(false) @map("is_archived_p2")
  createdAt                                        DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt                                        DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  project                                          Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "conversations_ibfk_1")
  participant1                                     User        @relation("ConversationParticipant1", fields: [participant1Id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "conversations_ibfk_2")
  participant2                                     User        @relation("ConversationParticipant2", fields: [participant2Id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "conversations_ibfk_3")
  messages_conversations_last_message_idTomessages Message?    @relation("conversations_last_message_idTomessages", fields: [lastMessageId], references: [id], onUpdate: Restrict, map: "conversations_ibfk_4")
  messages                                         Message[]
  videoCalls                                       VideoCall[]

  @@unique([participant1Id, participant2Id, projectId], map: "participants_project_unique")
  @@index([lastMessageId], map: "last_message_id")
  @@index([participant2Id], map: "participant_2_id")
  @@index([projectId], map: "project_id")
  @@map("conversations")
}

model Message {
  id                                                    Int                    @id @default(autoincrement())
  conversationId                                        Int                    @map("conversation_id")
  senderId                                              Int                    @map("sender_id")
  receiverId                                            Int                    @map("receiver_id")
  messageContent                                        String?                @map("message_content") @db.Text
  messageType                                           messages_message_type? @default(text) @map("message_type")
  attachments                                           String?                @db.LongText
  metadata                                              String?                @db.LongText
  isRead                                                Boolean?               @default(false) @map("is_read")
  readAt                                                DateTime?              @map("read_at") @db.Timestamp(0)
  isDeleted                                             Boolean?               @default(false) @map("is_deleted")
  deletedAt                                             DateTime?              @map("deleted_at") @db.Timestamp(0)
  createdAt                                             DateTime               @default(now()) @map("created_at") @db.Timestamp(0)
  conversations_conversations_last_message_idTomessages Conversation[]         @relation("conversations_last_message_idTomessages")
  conversation                                          Conversation           @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "messages_ibfk_1")
  sender                                                User                   @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "messages_ibfk_2")
  receiver                                              User                   @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "messages_ibfk_3")

  @@index([conversationId], map: "conversation_id")
  @@index([conversationId], map: "idx_messages_conversation_id")
  @@index([createdAt], map: "idx_messages_created_at")
  @@index([isRead], map: "idx_messages_is_read")
  @@index([receiverId], map: "idx_messages_receiver_id")
  @@index([senderId], map: "idx_messages_sender_id")
  @@index([receiverId], map: "receiver_id")
  @@index([senderId], map: "sender_id")
  @@map("messages")
}

model VideoCall {
  id              Int                 @id @default(autoincrement())
  conversationId  Int                 @map("conversation_id")
  initiatorId     Int                 @map("initiator_id")
  roomId          String              @unique(map: "room_id") @map("room_id") @db.VarChar(255)
  durationMinutes Int?                @default(0) @map("duration_minutes")
  status          video_calls_status? @default(scheduled)
  recordingUrl    String?             @map("recording_url") @db.LongText
  scheduledAt     DateTime?           @map("scheduled_at") @db.Timestamp(0)
  startedAt       DateTime?           @map("started_at") @db.Timestamp(0)
  endedAt         DateTime?           @map("ended_at") @db.Timestamp(0)
  createdAt       DateTime            @default(now()) @map("created_at") @db.Timestamp(0)
  conversation    Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "video_calls_ibfk_1")
  initiator       User                @relation("VideoCallInitiator", fields: [initiatorId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "video_calls_ibfk_2")

  @@index([conversationId], map: "conversation_id")
  @@index([initiatorId], map: "initiator_id")
  @@map("video_calls")
}

model Wallet {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique(map: "user_id") @map("user_id")
  availableBalance  Decimal?  @default(0.00) @map("available_balance") @db.Decimal(12, 2)
  pendingBalance    Decimal?  @default(0.00) @map("pending_balance") @db.Decimal(12, 2)
  escrowBalance     Decimal?  @default(0.00) @map("escrow_balance") @db.Decimal(12, 2)
  lifetimeEarnings  Decimal?  @default(0.00) @map("lifetime_earnings") @db.Decimal(15, 2)
  lifetimeSpent     Decimal?  @default(0.00) @map("lifetime_spent") @db.Decimal(15, 2)
  currency          String?   @default("USD") @db.VarChar(3)
  lastTransactionAt DateTime? @map("last_transaction_at") @db.Timestamp(0)
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "wallets_ibfk_1")

  @@map("wallets")
}

model PaymentMethod {
  id                 Int                  @id @default(autoincrement())
  userId             Int                  @map("user_id")
  type               payment_methods_type
  provider           String?              @db.VarChar(50)
  externalId         String?              @map("external_id") @db.VarChar(255)
  lastFour           String?              @map("last_four") @db.VarChar(4)
  brand              String?              @db.VarChar(50)
  billingDetails     String?              @map("billing_details") @db.LongText
  isDefault          Boolean?             @default(false) @map("is_default")
  isVerified         Boolean?             @default(false) @map("is_verified")
  metadata           String?              @db.LongText
  verifiedAt         DateTime?            @map("verified_at") @db.Timestamp(0)
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt          DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_methods_ibfk_1")
  withdrawalRequests WithdrawalRequest[]

  @@index([userId], map: "user_id")
  @@map("payment_methods")
}

model Transaction {
  id                    Int                  @id @default(autoincrement())
  fromUserId            Int?                 @map("from_user_id")
  toUserId              Int?                 @map("to_user_id")
  projectId             Int?                 @map("project_id")
  milestoneId           Int?                 @map("milestone_id")
  transactionId         String               @unique(map: "transaction_id") @map("transaction_id") @db.VarChar(255)
  externalTransactionId String?              @map("external_transaction_id") @db.VarChar(255)
  type                  transactions_type
  amount                Decimal              @db.Decimal(12, 2)
  feeAmount             Decimal?             @default(0.00) @map("fee_amount") @db.Decimal(12, 2)
  currency              String?              @default("USD") @db.VarChar(3)
  status                transactions_status? @default(pending)
  paymentMethod         String?              @map("payment_method") @db.VarChar(100)
  gateway               String?              @db.VarChar(50)
  gatewayResponse       String?              @map("gateway_response") @db.LongText
  metadata              String?              @db.LongText
  description           String?              @db.Text
  processedAt           DateTime?            @map("processed_at") @db.Timestamp(0)
  createdAt             DateTime             @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt             DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  fromUser              User?                @relation("SentTransactions", fields: [fromUserId], references: [id], onUpdate: Restrict, map: "transactions_ibfk_1")
  toUser                User?                @relation("ReceivedTransactions", fields: [toUserId], references: [id], onUpdate: Restrict, map: "transactions_ibfk_2")
  project               Project?             @relation(fields: [projectId], references: [id], onUpdate: Restrict, map: "transactions_ibfk_3")
  milestone             ProjectMilestone?    @relation(fields: [milestoneId], references: [id], onUpdate: Restrict, map: "transactions_ibfk_4")

  @@index([fromUserId], map: "from_user_id")
  @@index([createdAt], map: "idx_transactions_created_at")
  @@index([fromUserId], map: "idx_transactions_from_user_id")
  @@index([projectId], map: "idx_transactions_project_id")
  @@index([status], map: "idx_transactions_status")
  @@index([toUserId], map: "idx_transactions_to_user_id")
  @@index([type], map: "idx_transactions_type")
  @@index([milestoneId], map: "milestone_id")
  @@index([projectId], map: "project_id")
  @@index([toUserId], map: "to_user_id")
  @@map("transactions")
}

model EscrowAccount {
  id                Int                     @id @default(autoincrement())
  projectId         Int                     @map("project_id")
  milestoneId       Int?                    @map("milestone_id")
  clientId          Int                     @map("client_id")
  freelancerId      Int                     @map("freelancer_id")
  amount            Decimal                 @db.Decimal(12, 2)
  feeAmount         Decimal?                @default(0.00) @map("fee_amount") @db.Decimal(12, 2)
  status            escrow_accounts_status? @default(pending)
  releaseConditions String?                 @map("release_conditions") @db.Text
  fundedAt          DateTime?               @map("funded_at") @db.Timestamp(0)
  releasedAt        DateTime?               @map("released_at") @db.Timestamp(0)
  expiresAt         DateTime?               @map("expires_at") @db.Timestamp(0)
  createdAt         DateTime                @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt         DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  project           Project                 @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "escrow_accounts_ibfk_1")
  milestone         ProjectMilestone?       @relation(fields: [milestoneId], references: [id], onUpdate: Restrict, map: "escrow_accounts_ibfk_2")
  client            User                    @relation("EscrowClient", fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "escrow_accounts_ibfk_3")
  freelancer        User                    @relation("EscrowFreelancer", fields: [freelancerId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "escrow_accounts_ibfk_4")

  @@index([clientId], map: "client_id")
  @@index([freelancerId], map: "freelancer_id")
  @@index([milestoneId], map: "milestone_id")
  @@index([projectId], map: "project_id")
  @@map("escrow_accounts")
}

model WithdrawalRequest {
  id                 Int                         @id @default(autoincrement())
  userId             Int                         @map("user_id")
  amount             Decimal                     @db.Decimal(12, 2)
  feeAmount          Decimal?                    @default(0.00) @map("fee_amount") @db.Decimal(12, 2)
  paymentMethodId    Int?                        @map("payment_method_id")
  paymentDetails     String?                     @map("payment_details") @db.LongText
  status             withdrawal_requests_status? @default(pending)
  adminNotes         String?                     @map("admin_notes") @db.Text
  processedByAdminId Int?                        @map("processed_by_admin_id")
  processedAt        DateTime?                   @map("processed_at") @db.Timestamp(0)
  createdAt          DateTime                    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt          DateTime                    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  user               User                        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "withdrawal_requests_ibfk_1")
  paymentMethod      PaymentMethod?              @relation(fields: [paymentMethodId], references: [id], onUpdate: Restrict, map: "withdrawal_requests_ibfk_2")
  processedByAdmin   User?                       @relation("WithdrawalProcessor", fields: [processedByAdminId], references: [id], onUpdate: Restrict, map: "withdrawal_requests_ibfk_3")

  @@index([paymentMethodId], map: "payment_method_id")
  @@index([processedByAdminId], map: "processed_by_admin_id")
  @@index([userId], map: "user_id")
  @@map("withdrawal_requests")
}

model Review {
  id              Int                   @id @default(autoincrement())
  projectId       Int                   @map("project_id")
  reviewerId      Int                   @map("reviewer_id")
  revieweeId      Int                   @map("reviewee_id")
  reviewerType    reviews_reviewer_type @map("reviewer_type")
  rating          Int
  comment         String?               @db.Text
  criteriaRatings String?               @map("criteria_ratings") @db.LongText
  prosCons        String?               @map("pros_cons") @db.LongText
  isPublic        Boolean?              @default(true) @map("is_public")
  isVerified      Boolean?              @default(false) @map("is_verified")
  helpfulCount    Int?                  @default(0) @map("helpful_count")
  createdAt       DateTime              @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  response        ReviewResponse?
  project         Project               @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "reviews_ibfk_1")
  reviewer        User                  @relation("ReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "reviews_ibfk_2")
  reviewee        User                  @relation("ReviewsReceived", fields: [revieweeId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "reviews_ibfk_3")

  @@unique([projectId, reviewerId], map: "project_reviewer_unique")
  @@index([isPublic], map: "idx_reviews_is_public")
  @@index([projectId], map: "idx_reviews_project_id")
  @@index([rating], map: "idx_reviews_rating")
  @@index([revieweeId], map: "idx_reviews_reviewee_id")
  @@index([reviewerId], map: "idx_reviews_reviewer_id")
  @@index([revieweeId], map: "reviewee_id")
  @@index([reviewerId], map: "reviewer_id")
  @@map("reviews")
}

model ReviewResponse {
  id        Int      @id @default(autoincrement())
  reviewId  Int      @unique(map: "review_id") @map("review_id")
  userId    Int      @map("user_id")
  response  String   @db.Text
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "review_responses_ibfk_1")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "review_responses_ibfk_2")

  @@index([userId], map: "user_id")
  @@map("review_responses")
}

model UserReputation {
  userId               Int       @id @map("user_id")
  overallRating        Decimal?  @default(0.00) @map("overall_rating") @db.Decimal(3, 2)
  totalReviews         Int?      @default(0) @map("total_reviews")
  completedProjects    Int?      @default(0) @map("completed_projects")
  successRate          Decimal?  @default(0.00) @map("success_rate") @db.Decimal(5, 2)
  responseTimeAvgHours Int?      @default(0) @map("response_time_avg_hours")
  clientSatisfaction   Decimal?  @default(0.00) @map("client_satisfaction") @db.Decimal(3, 2)
  qualityScore         Decimal?  @default(0.00) @map("quality_score") @db.Decimal(3, 2)
  professionalismScore Decimal?  @default(0.00) @map("professionalism_score") @db.Decimal(3, 2)
  communicationScore   Decimal?  @default(0.00) @map("communication_score") @db.Decimal(3, 2)
  totalEarnings        Int?      @default(0) @map("total_earnings")
  repeatClients        Int?      @default(0) @map("repeat_clients")
  lastCalculated       DateTime? @map("last_calculated") @db.Timestamp(0)
  updatedAt            DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_reputation_ibfk_1")

  @@map("user_reputation")
}

model BadgeCategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  slug        String   @unique(map: "slug") @db.VarChar(100)
  description String?  @db.Text
  icon        String?  @db.VarChar(100)
  color       String?  @db.VarChar(7)
  sortOrder   Int?     @default(0) @map("sort_order")
  isActive    Boolean? @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  badges      Badge[]

  @@map("badge_categories")
}

model Badge {
  id           Int              @id @default(autoincrement())
  categoryId   Int              @map("category_id")
  name         String           @db.VarChar(100)
  slug         String           @unique(map: "slug") @db.VarChar(100)
  description  String?          @db.Text
  icon         String?          @db.VarChar(100)
  rarity       badges_rarity?   @default(common)
  requirements String?          @db.LongText
  rewards      String?          @db.LongText
  isActive     Boolean?         @default(true) @map("is_active")
  isAutomatic  Boolean?         @default(true) @map("is_automatic")
  earnedCount  Int?             @default(0) @map("earned_count")
  createdAt    DateTime         @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  milestones   BadgeMilestone[]
  category     BadgeCategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "badges_ibfk_1")
  userBadges   UserBadge[]

  @@index([categoryId], map: "category_id")
  @@map("badges")
}

model UserBadge {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  badgeId         Int      @map("badge_id")
  earnedAt        DateTime @default(now()) @map("earned_at") @db.Timestamp(0)
  progressData    String?  @map("progress_data") @db.LongText
  isFeatured      Boolean? @default(false) @map("is_featured")
  isPublic        Boolean? @default(true) @map("is_public")
  earnDescription String?  @map("earn_description") @db.Text
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_badges_ibfk_1")
  badge           Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_badges_ibfk_2")

  @@unique([userId, badgeId], map: "user_badge_unique")
  @@index([badgeId], map: "badge_id")
  @@map("user_badges")
}

model BadgeMilestone {
  id             Int      @id @default(autoincrement())
  badgeId        Int      @map("badge_id")
  milestoneName  String   @map("milestone_name") @db.VarChar(100)
  requirements   String?  @db.LongText
  sortOrder      Int?     @default(0) @map("sort_order")
  progressWeight Decimal? @default(1.00) @map("progress_weight") @db.Decimal(3, 2)
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  badge          Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "badge_milestones_ibfk_1")

  @@index([badgeId], map: "badge_id")
  @@map("badge_milestones")
}

model FileUpload {
  id                 Int                             @id @default(autoincrement())
  userId             Int                             @map("user_id")
  entityType         file_uploads_entity_type        @map("entity_type")
  entityId           Int                             @map("entity_id")
  fileName           String                          @map("file_name") @db.VarChar(255)
  originalName       String                          @map("original_name") @db.VarChar(255)
  fileSize           BigInt                          @map("file_size")
  mimeType           String                          @map("mime_type") @db.VarChar(100)
  storageProvider    file_uploads_storage_provider?  @default(local) @map("storage_provider")
  storagePath        String                          @map("storage_path") @db.Text
  cdnUrl             String?                         @map("cdn_url") @db.Text
  thumbnailUrl       String?                         @map("thumbnail_url") @db.Text
  isPublic           Boolean?                        @default(false) @map("is_public")
  isTemporary        Boolean?                        @default(false) @map("is_temporary")
  downloadCount      Int?                            @default(0) @map("download_count")
  virusScanStatus    file_uploads_virus_scan_status? @default(pending) @map("virus_scan_status")
  metadata           String?                         @db.LongText
  expiresAt          DateTime?                       @map("expires_at") @db.Timestamp(0)
  createdAt          DateTime                        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt          DateTime                        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  user               User                            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "file_uploads_ibfk_1")
  projectAttachments ProjectAttachment[]

  @@index([createdAt], map: "idx_file_uploads_created_at")
  @@index([entityType, entityId], map: "idx_file_uploads_entity")
  @@index([userId], map: "idx_file_uploads_user_id")
  @@index([userId], map: "user_id")
  @@map("file_uploads")
}

model ProjectAttachment {
  id                 Int                                 @id @default(autoincrement())
  projectId          Int                                 @map("project_id")
  fileUploadId       Int                                 @map("file_upload_id")
  attachmentType     project_attachments_attachment_type @map("attachment_type")
  uploadedById       Int                                 @map("uploaded_by_id")
  description        String?                             @db.Text
  isFinalDeliverable Boolean?                            @default(false) @map("is_final_deliverable")
  requiresApproval   Boolean?                            @default(false) @map("requires_approval")
  approvedAt         DateTime?                           @map("approved_at") @db.Timestamp(0)
  approvedById       Int?                                @map("approved_by_id")
  createdAt          DateTime                            @default(now()) @map("created_at") @db.Timestamp(0)
  project            Project                             @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "project_attachments_ibfk_1")
  fileUpload         FileUpload                          @relation(fields: [fileUploadId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "project_attachments_ibfk_2")
  uploadedBy         User                                @relation("AttachmentUploader", fields: [uploadedById], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "project_attachments_ibfk_3")
  approvedBy         User?                               @relation("AttachmentApprover", fields: [approvedById], references: [id], onUpdate: Restrict, map: "project_attachments_ibfk_4")

  @@index([approvedById], map: "approved_by_id")
  @@index([fileUploadId], map: "file_upload_id")
  @@index([projectId], map: "project_id")
  @@index([uploadedById], map: "uploaded_by_id")
  @@map("project_attachments")
}

model Notification {
  id            Int                     @id @default(autoincrement())
  userId        Int                     @map("user_id")
  title         String                  @db.VarChar(255)
  message       String                  @db.Text
  type          notifications_type?     @default(info)
  priority      notifications_priority? @default(normal)
  data          String?                 @db.LongText
  actionButtons String?                 @map("action_buttons") @db.LongText
  isRead        Boolean?                @default(false) @map("is_read")
  isDismissed   Boolean?                @default(false) @map("is_dismissed")
  readAt        DateTime?               @map("read_at") @db.Timestamp(0)
  expiresAt     DateTime?               @map("expires_at") @db.Timestamp(0)
  createdAt     DateTime                @default(now()) @map("created_at") @db.Timestamp(0)
  user          User                    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "notifications_ibfk_1")

  @@index([createdAt], map: "idx_notifications_created_at")
  @@index([isRead], map: "idx_notifications_is_read")
  @@index([type], map: "idx_notifications_type")
  @@index([userId], map: "idx_notifications_user_id")
  @@index([userId], map: "user_id")
  @@map("notifications")
}

model NotificationPreference {
  userId             Int                                 @id @map("user_id")
  emailNotifications String?                             @map("email_notifications") @db.LongText
  pushNotifications  String?                             @map("push_notifications") @db.LongText
  smsNotifications   String?                             @map("sms_notifications") @db.LongText
  frequency          notification_preferences_frequency? @default(instant)
  quietHoursStart    DateTime?                           @map("quiet_hours_start") @db.Time(0)
  quietHoursEnd      DateTime?                           @map("quiet_hours_end") @db.Time(0)
  timezone           String?                             @db.VarChar(50)
  marketingEmails    Boolean?                            @default(true) @map("marketing_emails")
  updatedAt          DateTime                            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  user               User                                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "notification_preferences_ibfk_1")

  @@map("notification_preferences")
}

model Favorite {
  id         Int                   @id @default(autoincrement())
  userId     Int                   @map("user_id")
  entityType favorites_entity_type @map("entity_type")
  entityId   Int                   @map("entity_id")
  notes      String?               @db.Text
  tags       String?               @db.LongText
  createdAt  DateTime              @default(now()) @map("created_at") @db.Timestamp(0)
  user       User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "favorites_ibfk_1")

  @@unique([userId, entityType, entityId], map: "user_entity_unique")
  @@map("favorites")
}

model SavedSearch {
  id             Int                             @id @default(autoincrement())
  userId         Int                             @map("user_id")
  searchName     String                          @map("search_name") @db.VarChar(100)
  searchCriteria String                          @map("search_criteria") @db.LongText
  alertFrequency saved_searches_alert_frequency? @default(never) @map("alert_frequency")
  isActive       Boolean?                        @default(true) @map("is_active")
  resultsCount   Int?                            @default(0) @map("results_count")
  lastAlertSent  DateTime?                       @map("last_alert_sent") @db.Timestamp(0)
  lastExecuted   DateTime?                       @map("last_executed") @db.Timestamp(0)
  createdAt      DateTime                        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime                        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  user           User                            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "saved_searches_ibfk_1")

  @@index([userId], map: "user_id")
  @@map("saved_searches")
}

model Dispute {
  id              Int                       @id @default(autoincrement())
  projectId       Int                       @map("project_id")
  initiatorId     Int                       @map("initiator_id")
  respondentId    Int                       @map("respondent_id")
  reason          disputes_reason
  description     String                    @db.Text
  disputedAmount  Decimal?                  @map("disputed_amount") @db.Decimal(12, 2)
  status          disputes_status?          @default(open)
  resolutionType  disputes_resolution_type? @map("resolution_type")
  evidence        String?                   @db.LongText
  resolution      String?                   @db.Text
  adminId         Int?                      @map("admin_id")
  adminAssignedAt DateTime?                 @map("admin_assigned_at") @db.Timestamp(0)
  resolvedAt      DateTime?                 @map("resolved_at") @db.Timestamp(0)
  createdAt       DateTime                  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime                  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  messages        DisputeMessage[]
  project         Project                   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "disputes_ibfk_1")
  initiator       User                      @relation("DisputeInitiator", fields: [initiatorId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "disputes_ibfk_2")
  respondent      User                      @relation("DisputeRespondent", fields: [respondentId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "disputes_ibfk_3")
  admin           User?                     @relation("DisputeAdmin", fields: [adminId], references: [id], onUpdate: Restrict, map: "disputes_ibfk_4")

  @@index([adminId], map: "admin_id")
  @@index([initiatorId], map: "initiator_id")
  @@index([projectId], map: "project_id")
  @@index([respondentId], map: "respondent_id")
  @@map("disputes")
}

model DisputeMessage {
  id             Int      @id @default(autoincrement())
  disputeId      Int      @map("dispute_id")
  userId         Int      @map("user_id")
  message        String   @db.Text
  attachments    String?  @db.LongText
  isAdminMessage Boolean? @default(false) @map("is_admin_message")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  dispute        Dispute  @relation(fields: [disputeId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "dispute_messages_ibfk_1")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "dispute_messages_ibfk_2")

  @@index([disputeId], map: "dispute_id")
  @@index([userId], map: "user_id")
  @@map("dispute_messages")
}

model SupportTicket {
  id              Int                       @id @default(autoincrement())
  userId          Int                       @map("user_id")
  ticketNumber    String                    @unique(map: "ticket_number") @map("ticket_number") @db.VarChar(20)
  subject         String                    @db.VarChar(255)
  description     String                    @db.Text
  category        support_tickets_category
  priority        support_tickets_priority? @default(normal)
  status          support_tickets_status?   @default(open)
  assignedAdminId Int?                      @map("assigned_admin_id")
  attachments     String?                   @db.LongText
  firstResponseAt DateTime?                 @map("first_response_at") @db.Timestamp(0)
  resolvedAt      DateTime?                 @map("resolved_at") @db.Timestamp(0)
  createdAt       DateTime                  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime                  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  responses       SupportResponse[]
  user            User                      @relation("SupportTicketUser", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "support_tickets_ibfk_1")
  assignedAdmin   User?                     @relation("SupportTicketAssignee", fields: [assignedAdminId], references: [id], onUpdate: Restrict, map: "support_tickets_ibfk_2")

  @@index([assignedAdminId], map: "assigned_admin_id")
  @@index([userId], map: "user_id")
  @@map("support_tickets")
}

model SupportResponse {
  id              Int           @id @default(autoincrement())
  ticketId        Int           @map("ticket_id")
  userId          Int           @map("user_id")
  response        String        @db.Text
  isAdminResponse Boolean?      @default(false) @map("is_admin_response")
  attachments     String?       @db.LongText
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamp(0)
  ticket          SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "support_responses_ibfk_1")
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "support_responses_ibfk_2")

  @@index([ticketId], map: "ticket_id")
  @@index([userId], map: "user_id")
  @@map("support_responses")
}

model ActivityLog {
  id         Int      @id @default(autoincrement())
  userId     Int?     @map("user_id")
  action     String   @db.VarChar(100)
  entityType String?  @map("entity_type") @db.VarChar(50)
  entityId   Int?     @map("entity_id")
  data       String?  @db.LongText
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.Text
  sessionId  String?  @map("session_id") @db.VarChar(255)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  user       User?    @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "activity_logs_ibfk_1")

  @@index([userId], map: "user_id")
  @@map("activity_logs")
}

model UserAnalytic {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  date            DateTime @db.Date
  profileViews    Int?     @default(0) @map("profile_views")
  serviceViews    Int?     @default(0) @map("service_views")
  messageSent     Int?     @default(0) @map("message_sent")
  proposalsSent   Int?     @default(0) @map("proposals_sent")
  projectsCreated Int?     @default(0) @map("projects_created")
  earningsDay     Decimal? @default(0.00) @map("earnings_day") @db.Decimal(12, 2)
  loginCount      Int?     @default(0) @map("login_count")
  activeMinutes   Int?     @default(0) @map("active_minutes")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_analytics_ibfk_1")

  @@unique([userId, date], map: "user_date_unique")
  @@map("user_analytics")
}

enum favorites_entity_type {
  user
  project
  service
  portfolio
  message
  dispute
  support_ticket
}

enum file_uploads_entity_type {
  user
  project
  service
  portfolio
  message
  dispute
  support_ticket
}

enum payment_methods_type {
  credit_card
  debit_card
  paypal
  stripe
  bank_transfer
  crypto
}

enum service_packages_package_type {
  basic
  standard
  premium
}

enum freelancer_skills_proficiency_level {
  beginner
  intermediate
  advanced
  expert
}

enum project_attachments_attachment_type {
  requirement
  deliverable
  reference
  final
}

enum users_user_type {
  client
  freelancer
  admin
  both
}

enum disputes_reason {
  quality
  deadline
  payment
  communication
  requirements
  other
}

enum notifications_type {
  info
  success
  warning
  error
  proposal
  message
  payment
  review
}

enum notification_preferences_frequency {
  instant
  daily
  weekly
  never
}

enum reviews_reviewer_type {
  client
  freelancer
}

enum saved_searches_alert_frequency {
  instant
  daily
  weekly
  never
}

enum freelancer_profiles_availability {
  available
  busy
  unavailable
  vacation
}

enum messages_message_type {
  text
  file
  image
  proposal
  milestone
  system
}

enum notifications_priority {
  low
  normal
  high
  urgent
}

enum support_tickets_category {
  technical
  billing
  account
  dispute
  feature_request
  other
}

enum video_calls_status {
  scheduled
  ongoing
  completed
  cancelled
  failed
}

enum badges_rarity {
  common
  uncommon
  rare
  epic
  legendary
}

enum project_milestones_status {
  pending
  in_progress
  completed
  approved
  disputed
}

enum support_tickets_priority {
  low
  normal
  high
  urgent
}

enum withdrawal_requests_status {
  pending
  processing
  completed
  rejected
  cancelled
}

enum disputes_status {
  open
  in_review
  resolved
  closed
}

enum escrow_accounts_status {
  pending
  funded
  released
  refunded
  disputed
  expired
}

enum support_tickets_status {
  open
  assigned
  in_progress
  waiting_customer
  resolved
  closed
}

enum transactions_type {
  payment
  withdrawal
  refund
  fee
  bonus
  escrow_fund
  escrow_release
}

enum disputes_resolution_type {
  refund
  partial_refund
  rework
  dismissed
}

enum file_uploads_storage_provider {
  local
  s3
  gcs
  azure
}

enum projects_budget_type {
  fixed
  hourly
  milestone
}

enum proposals_status {
  pending
  accepted
  rejected
  withdrawn
}

enum projects_status {
  draft
  published
  in_progress
  completed
  cancelled
  disputed
}

enum users_status {
  active
  inactive
  suspended
  pending_verification
  deleted
}

enum transactions_status {
  pending
  processing
  completed
  failed
  cancelled
  refunded
}

enum projects_experience_level {
  entry
  intermediate
  expert
}

enum file_uploads_virus_scan_status {
  pending
  clean
  infected
  failed
}
