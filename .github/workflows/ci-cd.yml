name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ================================
  # Code Quality & Testing
  # ================================
  quality:
    name: 🔍 Code Quality & Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        workspace: [frontend, backend]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    - name: 📦 Install dependencies
      run: |
        npm ci
        cd ${{ matrix.workspace }}
        npm ci
        
    - name: 🔍 Lint check
      run: |
        cd ${{ matrix.workspace }}
        npm run lint
        
    - name: 🏗️ Type check
      run: |
        cd ${{ matrix.workspace }}
        if [ "${{ matrix.workspace }}" = "frontend" ]; then
          npm run type-check
        else
          npm run build
        fi
        
    - name: 🧪 Run tests
      run: |
        cd ${{ matrix.workspace }}
        npm run test:coverage
        
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./${{ matrix.workspace }}/coverage/lcov.info
        flags: ${{ matrix.workspace }}
        
    - name: 🏗️ Build check
      run: |
        cd ${{ matrix.workspace }}
        npm run build

  # ================================
  # Security Audit
  # ================================
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔒 Security audit
      run: |
        npm audit --audit-level high
        cd frontend && npm audit --audit-level high
        cd ../backend && npm audit --audit-level high
        
    - name: 🔍 CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript
        
    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # ================================
  # End-to-End Testing
  # ================================
  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [quality]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: laburemos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm run install:all
      
    - name: 🗄️ Setup test database
      run: |
        cd backend
        DATABASE_URL="postgresql://postgres:postgres@localhost:5432/laburemos_test" npm run db:migrate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/laburemos_test
        
    - name: 🏗️ Build applications
      run: npm run build
      
    - name: 🎭 Install Playwright
      run: cd frontend && npx playwright install --with-deps
      
    - name: 🎭 Run E2E tests
      run: |
        npm run start &
        sleep 30
        cd frontend && npm run test:e2e
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/laburemos_test
        REDIS_URL: redis://localhost:6379
        
    - name: 📊 Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  # ================================
  # Deploy to Production
  # ================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, security, e2e]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://laburemos.com.ar
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ⚙️ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: 🚀 Deploy to production
      run: |
        ./deploy.sh production
      env:
        IMAGE_TAG: ${{ github.sha }}
        
    - name: 🔍 Health check
      run: |
        sleep 120
        curl -f https://laburemos.com.ar/health || exit 1
        curl -f http://3.81.56.168:3001/health || exit 1
        
    - name: 📊 Update CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id E1E1QZ7YLALIAZ \
          --paths "/*"
          
    - name: 📊 Send deployment notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        channel: '#deployments'
        text: |
          🚀 Production Deployment Status: ${{ job.status }}
          📝 Commit: ${{ github.event.head_commit.message }}
          👤 Author: ${{ github.actor }}
          🔗 URL: https://laburemos.com.ar
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}