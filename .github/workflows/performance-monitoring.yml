name: 📊 Performance Monitoring

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      test_type:
        description: 'Type of performance test'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - lighthouse
          - load
          - api

env:
  AWS_REGION: 'us-east-1'

jobs:
  lighthouse-audit:
    name: 🏠 Lighthouse Performance Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'lighthouse' || github.event.inputs.test_type == 'full' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: 📦 Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: 🚀 Run Lighthouse audit
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            BASE_URL="https://laburemos.com.ar"
          else
            BASE_URL="https://staging.laburemos.com.ar"
          fi
          
          lhci autorun --config=./lighthouse.config.js --upload.target=temporary-public-storage || true
          
          # Create performance report
          echo "## 🏠 Lighthouse Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: $BASE_URL" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci
          retention-days: 30

  load-testing:
    name: ⚡ Load Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'load' || github.event.inputs.test_type == 'full' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup K6
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1

      - name: ⚡ Run load tests
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            BASE_URL="https://laburemos.com.ar"
          else
            BASE_URL="https://staging.laburemos.com.ar"
          fi
          
          cat > load-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          
          export let options = {
            stages: [
              { duration: '2m', target: 10 },
              { duration: '5m', target: 10 },
              { duration: '2m', target: 20 },
              { duration: '5m', target: 20 },
              { duration: '2m', target: 0 },
            ],
            thresholds: {
              http_req_duration: ['p(95)<500'],
              http_req_failed: ['rate<0.1'],
            },
          };
          
          export default function() {
            const baseUrl = __ENV.BASE_URL;
            
            // Test homepage
            let response = http.get(baseUrl);
            check(response, {
              'homepage status is 200': (r) => r.status === 200,
              'homepage load time < 500ms': (r) => r.timings.duration < 500,
            });
            
            // Test API health
            response = http.get(`${baseUrl.replace('https://laburemos.com.ar', 'http://3.81.56.168:3001')}/health`);
            check(response, {
              'API health status is 200': (r) => r.status === 200,
            });
            
            sleep(1);
          }
          EOF
          
          ./k6 run --env BASE_URL=$BASE_URL load-test.js

      - name: 📊 Load test summary
        run: |
          echo "## ⚡ Load Testing Results" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test completed**: $(date)" >> $GITHUB_STEP_SUMMARY

  api-performance:
    name: 🔧 API Performance Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'api' || github.event.inputs.test_type == 'full' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: 📦 Install Artillery
        run: npm install -g artillery

      - name: 🔧 Run API performance tests
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            API_URL="http://3.81.56.168:3001"
          else
            API_URL="http://staging-api.laburemos.com.ar"
          fi
          
          cat > api-test.yml << 'EOF'
          config:
            target: '{{ $processEnvironment.API_URL }}'
            phases:
              - duration: 60
                arrivalRate: 5
                name: Warm up
              - duration: 120
                arrivalRate: 10
                name: Ramp up load
              - duration: 300
                arrivalRate: 15
                name: Sustained load
            ensure:
              p95: 200
              p99: 500
              maxErrorRate: 1
          
          scenarios:
            - name: 'API Health Checks'
              weight: 40
              flow:
                - get:
                    url: '/health'
                - get:
                    url: '/api/categories'
                - get:
                    url: '/api/services'
          
            - name: 'Authentication Flow'
              weight: 30
              flow:
                - post:
                    url: '/api/auth/register'
                    json:
                      email: 'test-{{ $randomString() }}@example.com'
                      password: 'testpass123'
                      name: 'Test User'
          
            - name: 'Search Operations'
              weight: 30
              flow:
                - get:
                    url: '/api/search?q=desarrollo'
                - get:
                    url: '/api/services?category=tecnologia'
          EOF
          
          artillery run api-test.yml --environment API_URL=$API_URL

      - name: 📊 API performance summary
        run: |
          echo "## 🔧 API Performance Results" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "**API URL**: $API_URL" >> $GITHUB_STEP_SUMMARY
          echo "**Test completed**: $(date)" >> $GITHUB_STEP_SUMMARY

  aws-monitoring:
    name: ☁️ AWS Resources Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'full'
    
    steps:
      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📊 Check ECS service health
        run: |
          echo "## ☁️ AWS Resources Health Check" >> $GITHUB_STEP_SUMMARY
          echo "### ECS Services" >> $GITHUB_STEP_SUMMARY
          
          # Production ECS
          if aws ecs describe-services --cluster laburemos-production --services laburemos-backend-production &>/dev/null; then
            RUNNING_COUNT=$(aws ecs describe-services --cluster laburemos-production --services laburemos-backend-production --query 'services[0].runningCount' --output text)
            DESIRED_COUNT=$(aws ecs describe-services --cluster laburemos-production --services laburemos-backend-production --query 'services[0].desiredCount' --output text)
            echo "- **Production Backend**: $RUNNING_COUNT/$DESIRED_COUNT running" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Staging ECS
          if aws ecs describe-services --cluster laburemos-staging --services laburemos-backend-staging &>/dev/null; then
            RUNNING_COUNT=$(aws ecs describe-services --cluster laburemos-staging --services laburemos-backend-staging --query 'services[0].runningCount' --output text)
            DESIRED_COUNT=$(aws ecs describe-services --cluster laburemos-staging --services laburemos-backend-staging --query 'services[0].desiredCount' --output text)
            echo "- **Staging Backend**: $RUNNING_COUNT/$DESIRED_COUNT running" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🗄️ Check RDS health
        run: |
          echo "### RDS Databases" >> $GITHUB_STEP_SUMMARY
          
          # Check PostgreSQL
          PG_STATUS=$(aws rds describe-db-instances --db-instance-identifier laburemos-postgres-production --query 'DBInstances[0].DBInstanceStatus' --output text 2>/dev/null || echo "not-found")
          echo "- **PostgreSQL**: $PG_STATUS" >> $GITHUB_STEP_SUMMARY
          
          # Check MySQL
          MYSQL_STATUS=$(aws rds describe-db-instances --db-instance-identifier laburemos-mysql-production --query 'DBInstances[0].DBInstanceStatus' --output text 2>/dev/null || echo "not-found")
          echo "- **MySQL**: $MYSQL_STATUS" >> $GITHUB_STEP_SUMMARY

      - name: 🔥 Check CloudFront status
        run: |
          echo "### CloudFront Distribution" >> $GITHUB_STEP_SUMMARY
          
          CF_STATUS=$(aws cloudfront get-distribution --id E1E1QZ7YLALIAZ --query 'Distribution.Status' --output text 2>/dev/null || echo "not-found")
          echo "- **Distribution Status**: $CF_STATUS" >> $GITHUB_STEP_SUMMARY

      - name: 💰 Cost monitoring
        run: |
          echo "### Cost Monitoring" >> $GITHUB_STEP_SUMMARY
          
          # Get current month costs (approximate)
          CURRENT_MONTH=$(date +%Y-%m-01)
          NEXT_MONTH=$(date -d "$CURRENT_MONTH +1 month" +%Y-%m-01)
          
          COSTS=$(aws ce get-cost-and-usage \
            --time-period Start=$CURRENT_MONTH,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --query 'ResultsByTime[0].Total.BlendedCost.Amount' \
            --output text 2>/dev/null || echo "unavailable")
          
          echo "- **Estimated monthly cost**: \$$COSTS USD" >> $GITHUB_STEP_SUMMARY

  alert-on-failures:
    name: 🚨 Alert on Performance Issues
    runs-on: ubuntu-latest
    needs: [lighthouse-audit, load-testing, api-performance, aws-monitoring]
    if: always() && (failure() || cancelled())
    
    steps:
      - name: 📢 Send Slack alert
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#performance-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "🚨 PERFORMANCE MONITORING ALERT",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "${{ github.event.inputs.environment || 'production' }}",
                      "short": true
                    },
                    {
                      "title": "Test Type",
                      "value": "${{ github.event.inputs.test_type || 'scheduled' }}",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "Performance tests failed",
                      "short": true
                    }
                  ]
                }
              ]
            }

      - name: 📧 Send email alert
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 LABUREMOS Performance Alert"
          body: |
            Performance monitoring detected issues in LABUREMOS.
            
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Test Type: ${{ github.event.inputs.test_type || 'scheduled' }}
            Timestamp: $(date)
            
            Please check the GitHub Actions logs for detailed information.
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: ${{ secrets.EMAIL_USERNAME }}