name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: laburemos-staging
  ECS_SERVICE_FRONTEND: laburemos-frontend-staging
  ECS_SERVICE_BACKEND: laburemos-backend-staging
  ECR_REPOSITORY_FRONTEND: public.ecr.aws/laburemos/frontend
  ECR_REPOSITORY_BACKEND: public.ecr.aws/laburemos/backend

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    outputs:
      frontend-url: ${{ steps.deploy-infra.outputs.frontend-url }}
      backend-url: ${{ steps.deploy-infra.outputs.backend-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation stack
        id: deploy-infra
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/aws/cloudformation-staging.yml \
            --stack-name laburemos-staging \
            --parameter-overrides \
              Environment=staging \
              DatabasePassword=${{ secrets.DB_PASSWORD_STAGING }} \
              RedisAuthToken=${{ secrets.REDIS_AUTH_TOKEN_STAGING }} \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }}
          
          # Get outputs
          FRONTEND_URL=$(aws cloudformation describe-stacks \
            --stack-name laburemos-staging \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontURL`].OutputValue' \
            --output text)
          
          BACKEND_URL=$(aws cloudformation describe-stacks \
            --stack-name laburemos-staging \
            --query 'Stacks[0].Outputs[?OutputKey==`ApplicationLoadBalancerURL`].OutputValue' \
            --output text)
          
          echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT

  migrate-database:
    name: Migrate Database
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Run database migrations
        run: |
          cd backend
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_STAGING }}

      - name: Seed database (if needed)
        run: |
          cd backend
          npm run db:seed
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_STAGING }}

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, migrate-database]
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS task definition
        run: |
          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition laburemos-backend-staging \
            --query 'taskDefinition' \
            --output json)
          
          # Update image URI
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE_URI "$ECR_REPOSITORY_BACKEND:${{ github.sha }}" \
            '.containerDefinitions[0].image = $IMAGE_URI | 
             del(.taskDefinitionArn) | 
             del(.revision) | 
             del(.status) | 
             del(.requiresAttributes) | 
             del(.placementConstraints) | 
             del(.compatibilities) | 
             del(.registeredAt) | 
             del(.registeredBy)')
          
          # Register new task definition
          echo $NEW_TASK_DEFINITION > backend-task-def.json
          aws ecs register-task-definition \
            --cli-input-json file://backend-task-def.json

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE_BACKEND }} \
            --task-definition laburemos-backend-staging \
            --force-new-deployment

      - name: Wait for service to be stable
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE_BACKEND }}

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ needs.deploy-infrastructure.outputs.backend-url }}
          NEXT_PUBLIC_ENVIRONMENT: staging

      - name: Deploy to S3
        run: |
          cd frontend
          aws s3 sync out/ s3://laburemos-frontend-staging --delete

      - name: Invalidate CloudFront cache
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name laburemos-staging \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
            --output text)
          
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    
    steps:
      - name: Check Backend Health
        run: |
          for i in {1..10}; do
            if curl -f "${{ needs.deploy-infrastructure.outputs.backend-url }}/health"; then
              echo "Backend is healthy"
              break
            fi
            echo "Attempt $i failed, retrying in 30s..."
            sleep 30
          done

      - name: Check Frontend
        run: |
          for i in {1..5}; do
            if curl -f "${{ needs.deploy-infrastructure.outputs.frontend-url }}"; then
              echo "Frontend is accessible"
              break
            fi
            echo "Attempt $i failed, retrying in 15s..."
            sleep 15
          done

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [health-check]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright
        run: |
          npm install -g @playwright/test
          npx playwright install

      - name: Run smoke tests
        run: |
          npx playwright test --config=e2e/playwright.staging.config.js
        env:
          BASE_URL: ${{ needs.deploy-infrastructure.outputs.frontend-url }}
          API_URL: ${{ needs.deploy-infrastructure.outputs.backend-url }}

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    if: always()
    
    steps:
      - name: Notify Slack on Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            üöÄ Staging deployment successful!
            Frontend: ${{ needs.deploy-infrastructure.outputs.frontend-url }}
            Backend: ${{ needs.deploy-infrastructure.outputs.backend-url }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '‚ùå Staging deployment failed for commit ${{ github.sha }}. Check the logs!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub Deployment
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'staging',
              description: 'Staging deployment',
              auto_merge: false
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ needs.deploy-infrastructure.outputs.frontend-url }}',
              description: 'Deployment successful'
            });