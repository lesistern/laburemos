name: Deploy to Oracle Cloud ARM Instance

on:
  push:
    branches: [ main, production, staging ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  OCI_REGION: 'us-ashburn-1'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service }}/package-lock.json

    - name: Install dependencies
      run: |
        cd ${{ matrix.service }}
        npm ci

    - name: Generate Prisma client (Backend only)
      if: matrix.service == 'backend'
      run: |
        cd backend
        npx prisma generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Run linting
      run: |
        cd ${{ matrix.service }}
        npm run lint

    - name: Run type checking
      run: |
        cd ${{ matrix.service }}
        npm run type-check || npm run build  # Some projects use build for type checking

    - name: Run unit tests
      run: |
        cd ${{ matrix.service }}
        npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        MYSQL_URL: mysql://root:root@localhost:3306/test_db

    - name: Run E2E tests (Backend only)
      if: matrix.service == 'backend'
      run: |
        cd backend
        npm run test:e2e
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379

    - name: Build application
      run: |
        cd ${{ matrix.service }}
        npm run build
      env:
        NEXT_PUBLIC_API_URL: https://staging.laburar.com/api
        NEXT_PUBLIC_WS_URL: https://staging.laburar.com

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.service }}-build
        path: |
          ${{ matrix.service }}/dist/
          ${{ matrix.service }}/.next/
        retention-days: 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Audit npm packages
      run: |
        cd backend && npm audit --audit-level high
        cd ../frontend && npm audit --audit-level high

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ matrix.service }}-

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./scripts/oci-deployment/${{ matrix.service }}.Dockerfile.prod
        platforms: linux/arm64
        push: false
        tags: laburar-${{ matrix.service }}:${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        build-args: |
          NEXT_PUBLIC_API_URL=${{ github.ref == 'refs/heads/main' && 'https://api.laburar.com' || 'https://staging-api.laburar.com' }}
          NEXT_PUBLIC_WS_URL=${{ github.ref == 'refs/heads/main' && 'https://laburar.com' || 'https://staging.laburar.com' }}

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-docker]
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')

    environment:
      name: staging
      url: https://staging.laburar.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.OCI_STAGING_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.OCI_STAGING_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to staging
      run: |
        ssh ubuntu@${{ secrets.OCI_STAGING_HOST }} << 'EOF'
          set -e
          
          # Navigate to application directory
          cd /opt/laburar
          
          # Create backup
          sudo cp -r /opt/laburar /opt/laburar-backup-$(date +%Y%m%d-%H%M%S)
          
          # Pull latest code
          git fetch origin
          git checkout staging
          git pull origin staging
          
          # Install dependencies and build backend
          cd backend
          npm ci --production=false
          npm run build
          
          # Install dependencies and build frontend
          cd ../frontend
          npm ci --production=false
          npm run build
          
          # Run database migrations
          cd ../backend
          npm run db:migrate
          
          # Restart applications with zero downtime
          pm2 reload ecosystem.config.js
          
          # Wait for services to start
          sleep 15
          
          # Health checks
          curl -f http://localhost:3000 || exit 1
          curl -f http://localhost:3001/health || exit 1
          
          echo "🎉 Staging deployment successful!"
        EOF

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Staging Deployment ${{ job.status }}!
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          URL: https://staging.laburar.com
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-docker]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')

    environment:
      name: production
      url: https://laburar.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.OCI_PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.OCI_PRODUCTION_HOST }} >> ~/.ssh/known_hosts

    - name: Pre-deployment backup
      run: |
        ssh ubuntu@${{ secrets.OCI_PRODUCTION_HOST }} << 'EOF'
          # Create full backup before production deployment
          /opt/laburar/scripts/backup.sh
          
          # Create application backup
          sudo cp -r /opt/laburar /opt/laburar-backup-$(date +%Y%m%d-%H%M%S)
        EOF

    - name: Deploy to production
      run: |
        ssh ubuntu@${{ secrets.OCI_PRODUCTION_HOST }} << 'EOF'
          set -e
          
          echo "🚀 Starting production deployment..."
          
          # Navigate to application directory
          cd /opt/laburar
          
          # Pull latest code
          git fetch origin
          git checkout main
          git pull origin main
          
          # Install dependencies and build backend
          echo "📦 Building backend..."
          cd backend
          npm ci --production=false
          npm run build
          
          # Install dependencies and build frontend
          echo "🎨 Building frontend..."
          cd ../frontend
          npm ci --production=false
          npm run build
          
          # Run database migrations
          echo "🗄️ Running database migrations..."
          cd ../backend
          npm run db:migrate
          
          # Restart applications with zero downtime
          echo "🔄 Restarting applications..."
          pm2 reload ecosystem.config.js
          
          # Wait for services to start
          echo "⏳ Waiting for services to start..."
          sleep 20
          
          # Comprehensive health checks
          echo "🏥 Running health checks..."
          
          # Check frontend
          if ! curl -f https://laburar.com; then
            echo "❌ Frontend health check failed"
            exit 1
          fi
          
          # Check backend API
          if ! curl -f https://laburar.com/api/health; then
            echo "❌ Backend health check failed"
            exit 1
          fi
          
          # Check database connectivity
          if ! npm run test:db; then
            echo "❌ Database health check failed"
            exit 1
          fi
          
          echo "✅ All health checks passed"
          echo "🎉 Production deployment successful!"
        EOF

    - name: Post-deployment monitoring
      run: |
        ssh ubuntu@${{ secrets.OCI_PRODUCTION_HOST }} << 'EOF'
          # Monitor for 2 minutes after deployment
          echo "📊 Post-deployment monitoring..."
          
          for i in {1..12}; do
            echo "Check $i/12..."
            
            # Check if services are responding
            curl -f https://laburar.com > /dev/null || {
              echo "❌ Service check failed at minute $((i/6))"
              exit 1
            }
            
            sleep 10
          done
          
          echo "✅ Post-deployment monitoring successful"
          
          # Clean old backups (keep last 5)
          ls -t /opt/laburar-backup-* | tail -n +6 | xargs sudo rm -rf || true
        EOF

    - name: Rollback on failure
      if: failure()
      run: |
        ssh ubuntu@${{ secrets.OCI_PRODUCTION_HOST }} << 'EOF'
          echo "🔄 Production deployment failed, initiating rollback..."
          
          # Find latest backup
          latest_backup=$(ls -t /opt/laburar-backup-* | head -n1)
          
          if [ -n "$latest_backup" ]; then
            echo "📦 Rolling back to $latest_backup"
            
            # Stop current services
            pm2 stop ecosystem.config.js || true
            
            # Restore backup
            sudo rm -rf /opt/laburar
            sudo mv "$latest_backup" /opt/laburar
            sudo chown -R ubuntu:ubuntu /opt/laburar
            
            # Restart services
            cd /opt/laburar
            pm2 start ecosystem.config.js
            
            echo "✅ Rollback completed"
          else
            echo "❌ No backup found for rollback"
            exit 1
          fi
        EOF

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          🚀 Production Deployment ${{ job.status }}!
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          URL: https://laburar.com
          ${{ job.status == 'failure' && '🔄 Automatic rollback initiated' || '🎉 Deployment successful!' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli

    - name: Run Lighthouse CI
      run: |
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        LHCI_SERVER_BASE_URL: ${{ github.ref == 'refs/heads/main' && 'https://laburar.com' || 'https://staging.laburar.com' }}

    - name: Load test with Artillery
      run: |
        npm install -g artillery
        echo "config:
          target: '${{ github.ref == 'refs/heads/main' && 'https://laburar.com' || 'https://staging.laburar.com' }}'
          phases:
            - duration: 60
              arrivalRate: 10
        scenarios:
          - name: 'Homepage'
            requests:
              - get:
                  url: '/'
          - name: 'API Health'
            requests:
              - get:
                  url: '/api/health'" > loadtest.yml
        
        artillery run loadtest.yml

  lighthouse-config:
    name: Lighthouse Configuration
    runs-on: ubuntu-latest
    steps:
    - name: Create Lighthouse Config
      run: |
        cat > lighthouserc.js << 'EOF'
        module.exports = {
          ci: {
            collect: {
              url: [
                'https://staging.laburar.com/',
                'https://staging.laburar.com/dashboard',
                'https://staging.laburar.com/categories'
              ],
              settings: {
                chromeFlags: '--no-sandbox --headless'
              }
            },
            assert: {
              assertions: {
                'categories:performance': ['warn', {minScore: 0.8}],
                'categories:accessibility': ['error', {minScore: 0.9}],
                'categories:best-practices': ['warn', {minScore: 0.8}],
                'categories:seo': ['warn', {minScore: 0.8}]
              }
            },
            upload: {
              target: 'temporary-public-storage'
            }
          }
        };
        EOF