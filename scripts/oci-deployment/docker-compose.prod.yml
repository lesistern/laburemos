# Docker Compose for LaburAR Production on Oracle Cloud ARM
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    platform: linux/arm64
    container_name: laburar-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: laburar
      POSTGRES_USER: laburar
      POSTGRES_PASSWORD: LaburAR2024!@#
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - laburar-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U laburar -d laburar"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    platform: linux/arm64
    container_name: laburar-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - laburar-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL Legacy Database
  mysql:
    image: mysql:8.0
    platform: linux/arm64
    container_name: laburar-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: LaburAR2024!@#
      MYSQL_DATABASE: laburar_legacy
      MYSQL_USER: laburar
      MYSQL_PASSWORD: LaburAR2024!@#
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/create_laburar_db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/database-updates.sql:/docker-entrypoint-initdb.d/02-updates.sql:ro
    ports:
      - "127.0.0.1:3306:3306"
    networks:
      - laburar-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "laburar", "-pLaburAR2024!@#"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NestJS Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      platforms:
        - linux/arm64
    container_name: laburar-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://laburar:LaburAR2024!@#@postgres:5432/laburar
      MYSQL_URL: mysql://laburar:LaburAR2024!@#@mysql:3306/laburar_legacy
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secure-jwt-secret-key-change-this
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
    volumes:
      - ./backend/uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "127.0.0.1:3001:3001"
    networks:
      - laburar-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      platforms:
        - linux/arm64
    container_name: laburar-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_API_URL: https://your-domain.com/api
      NEXT_PUBLIC_WS_URL: https://your-domain.com
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_your_stripe_publishable_key
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - laburar-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    platform: linux/arm64
    container_name: laburar-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./ssl:/etc/nginx/ssl:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - laburar-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mysql_data:
    driver: local

networks:
  laburar-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16